
	regions = {} # region data
	for he,ms in maps.iteritems():
            for m in ms:
                if  m.exon_known_2 == 2: # sw exon
                    continue  # I should be able to use those
	        gene_id = exon_id2gene_id(cursor, ensembl_db_name[m.species_2], m.exon_id_2, m.exon_known_2)
		region  = get_seq_region (cursor, ensembl_db_name[m.species_2], m.exon_id_2, m.exon_known_2)
                if not region: 
                    region  = get_alt_seq_region (cursor, ensembl_db_name[m.species_2], m.exon_id_2)
                if not region:
                    continue
		if m.species_2 not in regions: 
                    regions[m.species_2] = {}
		if gene_id     not in regions[m.species_2]: 
                    regions[m.species_2][gene_id] = {}
		if not regions[m.species_2][gene_id].has_key(index[he]): 
                    regions[m.species_2][gene_id][index[he]] = []
		regions[m.species_2][gene_id][index[he]].append(region)

        if 0:
            for species in regions.keys():
                print species
                for gene_id in regions[species].keys():
                    indices = sorted (regions[species][gene_id].keys())
                    print "\t", gene_id, indices
                    for idx in indices:
                        print "\t\t", idx,  "   ",
                        for region in regions[species][gene_id][idx]:
                            print  region.start, region.end,  "   ",
                        print 

            exit(1)
